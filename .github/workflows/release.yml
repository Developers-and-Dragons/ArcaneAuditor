name: ü™Ñ Arcane Auditor Release

permissions:
  contents: write

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build and publish release artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform_name: Windows
            
          - os: macos-latest
            platform_name: macOS

    steps:
      - name: ü™Ñ Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # macOS: Import code signing certificate
      - name: üîê Import Code Signing Certificate (macOS)
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        run: |
          # Create temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          
          # Create and unlock keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          # Import certificate
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 \
            -k "$KEYCHAIN_PATH" \
            -P "$MACOS_CERTIFICATE_PASSWORD" \
            -T /usr/bin/codesign \
            -T /usr/bin/security
          
          # Set keychain as default
          security list-keychain -d user -s "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple:,codesign: \
            -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          # Clean up certificate file
          rm certificate.p12
          
          echo "‚úÖ Certificate imported successfully"

      - name: ‚öôÔ∏è Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller typer click lark fastapi starlette uvicorn openpyxl python-multipart psutil pywebview requests

      - name: üß∞ Build executables (Windows)
        if: matrix.os == 'windows-latest'
        run: powershell .\scripts\build.ps1

      - name: üß∞ Build executables (macOS)
        if: matrix.os == 'macos-latest'
        env:
          CODESIGN_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        run: bash ./scripts/build.sh

      # macOS: Notarize all executables
      - name: üîè Notarize Executables (macOS)
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "=== Notarizing CLI executable ==="
          # Create ZIP for CLI
          ditto -c -k --keepParent dist/ArcaneAuditorCLI dist/ArcaneAuditorCLI.zip
          
          # Submit for notarization
          xcrun notarytool submit dist/ArcaneAuditorCLI.zip \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --wait
          
          # Staple ticket to executable (note: stapling may not work for non-.app executables, that's OK)
          xcrun stapler staple dist/ArcaneAuditorCLI || echo "Note: Stapling skipped for CLI (expected for non-.app)"
          
          echo "‚úÖ CLI notarized"
          echo ""
          
          echo "=== Notarizing Web server executable ==="
          # Create ZIP for Web
          ditto -c -k --keepParent dist/ArcaneAuditorWeb dist/ArcaneAuditorWeb.zip
          
          # Submit for notarization
          xcrun notarytool submit dist/ArcaneAuditorWeb.zip \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --wait
          
          # Staple ticket
          xcrun stapler staple dist/ArcaneAuditorWeb || echo "Note: Stapling skipped for Web (expected for non-.app)"
          
          echo "‚úÖ Web server notarized"
          echo ""
          
          echo "=== Notarizing Desktop app ==="
          # Create ZIP for .app
          ditto -c -k --keepParent dist/ArcaneAuditor.app dist/ArcaneAuditor.zip
          
          # Submit for notarization
          xcrun notarytool submit dist/ArcaneAuditor.zip \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --wait
          
          # Staple ticket to .app
          xcrun stapler staple dist/ArcaneAuditor.app
          
          echo "‚úÖ Desktop app notarized"
          echo ""
          echo "‚úÖ All executables notarized successfully"

      - name: üì¶ Create ZIP packages (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Compress-Archive -Path dist\ArcaneAuditorCLI.exe -DestinationPath ArcaneAuditor_Windows_CLI.zip
          Compress-Archive -Path dist\ArcaneAuditorWeb.exe -DestinationPath ArcaneAuditor_Windows_Web.zip
          Compress-Archive -Path dist\ArcaneAuditor.exe -DestinationPath ArcaneAuditor_Windows_Desktop.zip
          Write-Host "Created ZIP packages ready for release."

      - name: üì¶ Create packages (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # CLI and Web as tar.gz
          tar -czf ArcaneAuditor_macOS_CLI.tar.gz -C dist ArcaneAuditorCLI
          tar -czf ArcaneAuditor_macOS_Web.tar.gz -C dist ArcaneAuditorWeb
          
          # Desktop app as DMG (signed and notarized)
          # Create a temporary DMG directory
          mkdir -p dmg_temp
          cp -R dist/ArcaneAuditor.app dmg_temp/
          
          # Create DMG
          hdiutil create -volname "Arcane Auditor" \
            -srcfolder dmg_temp \
            -ov -format UDZO \
            ArcaneAuditor_macOS_Desktop.dmg
          
          # Clean up
          rm -rf dmg_temp
          
          echo "Created packages ready for release."

      - name: üöÄ Publish GitHub Release (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ArcaneAuditor_Windows_CLI.zip
            ArcaneAuditor_Windows_Web.zip
            ArcaneAuditor_Windows_Desktop.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üöÄ Publish GitHub Release (macOS)
        if: matrix.os == 'macos-latest'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ArcaneAuditor_macOS_CLI.tar.gz
            ArcaneAuditor_macOS_Web.tar.gz
            ArcaneAuditor_macOS_Desktop.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Cleanup keychain
      - name: üßπ Cleanup Keychain (macOS)
        if: matrix.os == 'macos-latest' && always()
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          if [ -f "$KEYCHAIN_PATH" ]; then
            security delete-keychain "$KEYCHAIN_PATH"
          fi
