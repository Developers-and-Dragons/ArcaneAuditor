name: üîè Sign & Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:

  windows-sign:
    name: üîè Windows EV Signing
    runs-on: self-hosted  # Your EV token machine

    steps:
      - name: üì• Download unsigned artifacts from vdevelop release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          New-Item -ItemType Directory -Force -Path ./unsigned | Out-Null
          gh release download vdevelop --repo ${{ github.repository }} --dir ./unsigned --pattern "*.exe"
          Write-Host "üì¶ Downloaded files:"
          Get-ChildItem ./unsigned | Format-Table Name, Length, LastWriteTime

      - name: üîè Sign executables (local EV cert)
        shell: pwsh
        run: |
          signtool sign /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 `
            /n "Chris Humphrey" /sm `
            "./unsigned/ArcaneAuditor.exe" `
            "./unsigned/ArcaneAuditorCLI.exe" `
            "./unsigned/ArcaneAuditorWeb.exe"

      - name: üì§ Upload signed Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-windows
          path: ./unsigned/*.exe

  mac-sign-notarize:
    name: üçé macOS Sign + Notarize
    runs-on: macos-latest

    steps:
      - name: üì• Download unsigned macOS artifacts from vdevelop release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p ./dist
          
          # Download CLI
          gh release download vdevelop --repo ${{ github.repository }} --dir ./dist --pattern "ArcaneAuditorCLI"
          
          # Download and extract .app bundle
          gh release download vdevelop --repo ${{ github.repository }} --dir ./dist --pattern "ArcaneAuditor.app.zip"
          
          if [ -f ./dist/ArcaneAuditor.app.zip ]; then
            echo "üì¶ Extracting ArcaneAuditor.app..."
            unzip -q ./dist/ArcaneAuditor.app.zip -d ./dist/
            rm ./dist/ArcaneAuditor.app.zip
          fi
          
          echo "üì¶ Downloaded and extracted files:"
          ls -lh ./dist/

      - name: üîè Import mac certificate
        env:
          MAC_CERT: ${{ secrets.MACOS_CERTIFICATE }}
          MAC_CERT_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        run: |
          echo "$MAC_CERT" | base64 --decode > cert.p12
          security create-keychain -p password build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p password build.keychain
          security import cert.p12 -k build.keychain -P "$MAC_CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k password build.keychain
          rm cert.p12

      - name: üîè Codesign App & CLI
        env:
          MAC_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        run: |
          # Sign the CLI first
          codesign --force --options runtime --sign "$MAC_IDENTITY" dist/ArcaneAuditorCLI --timestamp
          
          # Sign the app bundle
          codesign --force --deep --options runtime --sign "$MAC_IDENTITY" dist/ArcaneAuditor.app --timestamp
          
          # Verify signatures
          codesign --verify --verbose dist/ArcaneAuditorCLI
          codesign --verify --verbose dist/ArcaneAuditor.app

      - name: üöÄ Notarize App
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          ditto -c -k --keepParent dist/ArcaneAuditor.app dist/ArcaneAuditor.zip
          xcrun notarytool submit dist/ArcaneAuditor.zip \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
          xcrun stapler staple dist/ArcaneAuditor.app
          
          # Verify notarization
          spctl -a -vv dist/ArcaneAuditor.app

      - name: üì¶ Create DMG
        run: |
          mkdir dmg
          cp -R dist/ArcaneAuditor.app dmg/
          hdiutil create -volname "Arcane Auditor" \
            -srcfolder dmg \
            -ov -format UDZO \
            dist/ArcaneAuditor_macOS_Desktop.dmg
          rm -rf dmg
          
          # Sign the DMG as well
          codesign --force --sign "${{ secrets.MACOS_SIGNING_IDENTITY }}" dist/ArcaneAuditor_macOS_Desktop.dmg

      - name: üì§ Upload mac artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-macos
          path: |
            dist/*.dmg
            dist/ArcaneAuditorCLI

  publish:
    name: üöÄ Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [windows-sign, mac-sign-notarize]

    steps:
      - uses: actions/checkout@v4

      - name: üì• Download all signed artifacts
        uses: actions/download-artifact@v4
        with:
          path: signed-artifacts

      - name: üìã List all signed artifacts
        run: |
          echo "üì¶ All signed artifacts:"
          ls -R ./signed-artifacts/

      - name: üéØ Organize for release
        run: |
          mkdir -p release-files
          find ./signed-artifacts -type f \( -name "*.exe" -o -name "*.dmg" -o -name "ArcaneAuditorCLI" \) -exec cp {} ./release-files/ \;
          echo "üì¶ Files ready for release:"
          ls -lh ./release-files/

      - name: üöÄ Create Draft Release & Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          draft: true
          prerelease: false
          body: "Signed release artifacts. Please add release notes before publishing."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}