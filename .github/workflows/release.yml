name: üîè Sign & Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:

  windows-sign:
    name: üîê Windows EV Signing
    runs-on: self-hosted  # Your EV token machine

    steps:
      - uses: actions/checkout@v4

      - name: üì• Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: arcane-auditor-Windows
          path: dist

      - name: ü™Ñ EV Sign Windows Binaries
        shell: pwsh
        run: |
          $thumb="A5EBA89B65F776DB3DEB350BD3681BFF52AFE2E8"
          Get-ChildItem dist -Filter *.exe | ForEach-Object {
            & "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe" sign `
              /sha1 $thumb `
              /fd sha256 `
              /td sha256 `
              /tr http://timestamp.digicert.com `
              $_.FullName
          }

      - name: üì¶ Upload signed Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-windows
          path: dist/*.exe

  mac-sign-notarize:
    name: üçé macOS Sign + Notarize
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: üì• Download mac build artifacts
        uses: actions/download-artifact@v4
        with:
          name: arcane-auditor-macOS
          path: dist

      - name: üîê Import mac certificate
        env:
          MAC_CERT: ${{ secrets.MACOS_CERTIFICATE }}
          MAC_CERT_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        run: |
          echo "$MAC_CERT" | base64 --decode > cert.p12
          security create-keychain -p password build.keychain
          security import cert.p12 -k build.keychain -P "$MAC_CERT_PASSWORD" -T /usr/bin/codesign
          security list-keychain -d user -s build.keychain
          rm cert.p12

      - name: üîè Codesign App & CLI
        env:
          MAC_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        run: |
          codesign --force --deep --options runtime --sign "$MAC_IDENTITY" dist/ArcaneAuditor.app
          codesign --force --deep --options runtime --sign "$MAC_IDENTITY" dist/ArcaneAuditorCLI

      - name: üöÄ Notarize App
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          ditto -c -k --keepParent dist/ArcaneAuditor.app dist/ArcaneAuditor.zip
          xcrun notarytool submit dist/ArcaneAuditor.zip \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
          xcrun stapler staple dist/ArcaneAuditor.app

      - name: üì¶ Create DMG
        run: |
          mkdir dmg
          cp -R dist/ArcaneAuditor.app dmg/
          hdiutil create -volname "Arcane Auditor" \
            -srcfolder dmg \
            -ov -format UDZO \
            dist/ArcaneAuditor_macOS_Desktop.dmg
          rm -rf dmg

      - name: üì¶ Upload mac artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-macos
          path: |
            dist/*.dmg
            dist/ArcaneAuditorCLI

  publish:
    name: üöÄ Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [windows-sign, mac-sign-notarize]

    steps:
      - uses: actions/checkout@v4

      - name: üì• Download signed artifacts
        uses: actions/download-artifact@v4

      - name: üöÄ Create Release & Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            **/*.exe
            **/*.dmg
            **/ArcaneAuditorCLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
