name: üßô Arcane Auditor Build

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build:
    name: Build CLI + Web Executables (${{ matrix.os }})
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform_name: Windows
            build_script: powershell .\scripts\build.ps1
            cli_artifact: dist/ArcaneAuditorCLI.exe
            web_artifact: dist/ArcaneAuditorWeb.exe
          
          - os: macos-latest
            platform_name: macOS
            build_script: bash ./scripts/build.sh
            cli_artifact: dist/ArcaneAuditorCLI
            web_artifact: dist/ArcaneAuditorWeb
            desktop_artifact: dist/ArcaneAuditor.app
    
    runs-on: ${{ matrix.os }}

    steps:
      - name: ü™Ñ Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # macOS: Import code signing certificate
      - name: üîê Import Code Signing Certificate (macOS)
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        run: |
          # Create temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          
          # Create and unlock keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          # Import certificate
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 \
            -k "$KEYCHAIN_PATH" \
            -P "$MACOS_CERTIFICATE_PASSWORD" \
            -T /usr/bin/codesign \
            -T /usr/bin/security
          
          # Set keychain as default
          security list-keychain -d user -s "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple:,codesign: \
            -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          # Clean up certificate file
          rm certificate.p12
          
          echo "‚úÖ Certificate imported successfully"

      - name: ‚öôÔ∏è Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller typer click lark fastapi starlette uvicorn openpyxl python-multipart psutil pywebview requests

      - name: üß∞ Run build script
        env:
          CODESIGN_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        run: ${{ matrix.build_script }}

      - name: üì¶ Upload CLI build
        uses: actions/upload-artifact@v4
        with:
          name: ArcaneAuditor_CLI_${{ matrix.platform_name }}
          path: ${{ matrix.cli_artifact }}

      - name: üì¶ Upload Web build
        uses: actions/upload-artifact@v4
        with:
          name: ArcaneAuditor_Web_${{ matrix.platform_name }}
          path: ${{ matrix.web_artifact }}
      
      - name: üì¶ Upload Desktop build (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ArcaneAuditor_Desktop_${{ matrix.platform_name }}
          path: ${{ matrix.desktop_artifact }}

      # Cleanup keychain
      - name: üßπ Cleanup Keychain (macOS)
        if: matrix.os == 'macos-latest' && always()
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          if [ -f "$KEYCHAIN_PATH" ]; then
            security delete-keychain "$KEYCHAIN_PATH"
          fi
