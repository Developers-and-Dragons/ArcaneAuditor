name: üîè Sign & Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:

  # ü™ü WINDOWS BUILD & SIGN ------------------------------------
  windows-build:
    name: üèóÔ∏è Windows Build (Unsigned)
    runs-on: windows-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üßô Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.9.6"

      - name: üß© Setup Python
        run: uv python install 3.12

      - name: üèóÔ∏è Build Windows executables
        shell: pwsh
        run: ./scripts/build.ps1

      - name: üì¶ Upload unsigned artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-windows
          path: dist/*.exe


  windows-sign:
    name: üîè Windows EV Signing
    runs-on: self-hosted
    needs: windows-build

    steps:
      - name: üì• Download unsigned Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: unsigned-windows
          path: ./unsigned

      - name: üîè Sign executables (local EV cert)
        shell: pwsh
        run: |
          $thumb = "A5EBA89B65F776DB3DEB350BD3681BFF52AFE2E8"
          $exeFiles = Get-ChildItem ./unsigned -Filter *.exe
          foreach ($exe in $exeFiles) {
            Write-Host "üîè Signing $($exe.Name)"
            & signtool sign /sha1 $thumb /fd sha256 /td sha256 /tr http://timestamp.digicert.com $exe.FullName
          }
          Write-Host "‚úÖ Signatures applied"

      - name: üì§ Upload signed Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-windows
          path: ./unsigned/*.exe


  # üçé MAC BUILD + SIGN + NOTARIZE -----------------------------
  mac-sign-notarize:
    name: üçé macOS Build + Sign + Notarize
    runs-on: macos-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üßô Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.9.6"

      - name: üß© Setup Python
        run: uv python install 3.12

      - name: üèóÔ∏è Build macOS executables
        run: bash ./scripts/build.sh

      - name: üîè Import mac certificate
        env:
          MAC_CERT: ${{ secrets.MACOS_CERTIFICATE }}
          MAC_CERT_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        run: |
          echo "$MAC_CERT" | base64 --decode > cert.p12
          security create-keychain -p password build.keychain
          security unlock-keychain -p password build.keychain
          security import cert.p12 -k build.keychain -P "$MAC_CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k password build.keychain

      - name: üîè Codesign app bundle and CLI
        env:
          MAC_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        run: |
          APP="dist/ArcaneAuditor.app"
          CLI="dist/ArcaneAuditorCLI"

          echo "üîè Signing CLI..."
          codesign --force --options runtime --timestamp --sign "$MAC_IDENTITY" "$CLI"
          echo "üîè Signing app bundle..."
          codesign --force --options runtime --timestamp --sign "$MAC_IDENTITY" "$APP"
          codesign --verify --verbose=5 "$APP"

      - name: üöÄ Notarize App
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: ./scripts/notarize.sh dist/ArcaneAuditor.app

      - name: üöÄ Notarize CLI
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: ./scripts/notarize.sh dist/ArcaneAuditorCLI

      - name: üì¶ Create & Sign DMG
        env:
          MAC_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        run: |
          mkdir -p dmg
          cp -R -P dist/ArcaneAuditor.app dmg/
          DMG_PATH="dist/ArcaneAuditor_macOS_Desktop.dmg"
          hdiutil create -volname "Arcane Auditor" -srcfolder dmg -ov -format UDZO "$DMG_PATH"
          codesign --force --options runtime --timestamp --sign "$MAC_IDENTITY" "$DMG_PATH"
          echo "‚úÖ DMG created and signed"
          rm -rf dmg

      - name: üöÄ Notarize DMG
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: ./scripts/notarize.sh dist/ArcaneAuditor_macOS_Desktop.dmg

      - name: üì§ Upload signed mac artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-macos
          path: |
            dist/*.dmg
            dist/ArcaneAuditorCLI
            dist/ArcaneAuditor.app


  # üöÄ PUBLISH RELEASE ----------------------------------------
  publish:
    name: üöÄ Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [windows-sign, mac-sign-notarize]

    steps:
      - uses: actions/checkout@v4

      - name: üì• Download all signed artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-files

      - name: üóÉÔ∏è List release artifacts
        run: ls -R ./release-files

      - name: üöÄ Create Draft Release & Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/**
          draft: true
          prerelease: false
          body: "Signed & notarized release built from tag ${{ github.ref_name }}."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
